// <auto-generated />
using System;
using ContentAggregator.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ContentAggregator.Context.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210119193937_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ContentAggregator.Context.Entities.Comment", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("PostId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.Hash", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Hashes");
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.Likes.BaseLikeEntity<ContentAggregator.Context.Entities.Comment>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("CommentLikes");
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.Likes.BaseLikeEntity<ContentAggregator.Context.Entities.Post>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.Likes.BaseLikeEntity<ContentAggregator.Context.Entities.Response>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("EntityId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit");

                    b.HasKey("UserId", "EntityId");

                    b.HasIndex("EntityId");

                    b.ToTable("ResponseLikes");
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.Picture", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte[]>("File")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("MimeType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasFilter("[UserId] IS NOT NULL");

                    b.ToTable("Pictures");
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.Post", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(2000)")
                        .HasMaxLength(2000);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.Property<string>("StringTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.Response", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CommentId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(1000)")
                        .HasMaxLength(1000);

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Dislikes")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Likes")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CommentId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.Tag", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("PostsNumber")
                        .HasColumnType("int");

                    b.HasKey("Name");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<byte>("CredentialLevel")
                        .HasColumnType("tinyint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(300)")
                        .HasMaxLength(300);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("PictureId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StringBlackListedTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StringBlackListedUserIds")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StringFollowedTags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StringFollowedUserIds")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.Comment", b =>
                {
                    b.HasOne("ContentAggregator.Context.Entities.User", "Author")
                        .WithMany("Comments")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ContentAggregator.Context.Entities.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.Likes.BaseLikeEntity<ContentAggregator.Context.Entities.Comment>", b =>
                {
                    b.HasOne("ContentAggregator.Context.Entities.Comment", "Entity")
                        .WithMany("CommentLikes")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ContentAggregator.Context.Entities.User", "User")
                        .WithMany("CommentLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.Likes.BaseLikeEntity<ContentAggregator.Context.Entities.Post>", b =>
                {
                    b.HasOne("ContentAggregator.Context.Entities.Post", "Entity")
                        .WithMany("PostLikes")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ContentAggregator.Context.Entities.User", "User")
                        .WithMany("PostLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.Likes.BaseLikeEntity<ContentAggregator.Context.Entities.Response>", b =>
                {
                    b.HasOne("ContentAggregator.Context.Entities.Response", "Entity")
                        .WithMany("ResponseLikes")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("ContentAggregator.Context.Entities.User", "User")
                        .WithMany("ResponseLikes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.Picture", b =>
                {
                    b.HasOne("ContentAggregator.Context.Entities.User", "User")
                        .WithOne("Picture")
                        .HasForeignKey("ContentAggregator.Context.Entities.Picture", "UserId");
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.Post", b =>
                {
                    b.HasOne("ContentAggregator.Context.Entities.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("ContentAggregator.Context.Entities.Response", b =>
                {
                    b.HasOne("ContentAggregator.Context.Entities.User", "Author")
                        .WithMany("Responses")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ContentAggregator.Context.Entities.Comment", "Comment")
                        .WithMany("Responses")
                        .HasForeignKey("CommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
